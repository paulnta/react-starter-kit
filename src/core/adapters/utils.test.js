/**
 * react-webnerplan (https://enerplan.ch)
 *
 * Copyright Â© 2016-2017 Enerplan SA. All rights reserved.
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Written by Paul Nta <paul.nta@enerplan.ch>, $(date) $(user)
 */

/* global describe:true, it:true */
/* eslint-disable no-undef, no-unused-expressions*/
import { expect } from 'chai';
import _ from 'lodash';
import * as d3 from 'd3';
import moment from 'moment';
import { convertWeeksToStringDates } from './utils';

describe('Utils', () => {
  it('should return the correct date given a week number and a year', () => {
    const week = 11;
    const year = 2016;
    const date = moment()
      .year(year)
      .isoWeek(week)
      .isoWeekday(3)
      .format('YYYY-MM-DD');
    expect(date).to.equal('2016-03-16');
  });

  it('should return the correct date given a week number and a year', () => {
    const week = 53;
    const year = 2015;
    const date = moment()
      .year(year)
      .isoWeek(week)
      .isoWeekday(3)
      .format('YYYY-MM-DD');
    expect(date).to.equal('2015-12-30');
  });

  it('should return the correct week number given a date', () => {
    const date = '2016-03-14';
    const week = moment(date).isoWeek();
    expect(week).to.equal(11);
  });

  it('should return the correct week number given a date', () => {
    const date = '2015-12-30';
    const week = moment(date).isoWeek();
    expect(week).to.equal(53);
  });

  it.skip('should convert date to week number using d3', () => {
    const formatDate = d3.timeFormat('%U');
    const date = formatDate(moment('2015-12-30').isoWeekday(5).toDate());
    expect(date).to.equal(53);
  });

  it('should converts weeks numbers to an array of strings', () => {
    // expectedDates are found inside a protohebdo generated by optimise
    const expectedDates = ['2016-01-06', '2016-01-13', '2016-01-20', '2016-01-27', '2016-02-03', '2016-02-10', '2016-02-17', '2016-02-24', '2016-03-02', '2016-03-09', '2016-03-16'];
    const weeks = _.times(11, (v) => v + 1); // 1 .. 11
    const year = 2016;
    const dayOfWeek = 3;
    const dates = convertWeeksToStringDates(weeks, year, dayOfWeek);
    expect(dates).to.eql(expectedDates);
  });

  it('should use es6 to compute the min value of an array', () => {
    const array = [3, 5, 3, 2, 45, 7, 8];
    const array2 = [5, 4, 7, 8, 4, 6, 43, 3, 8];
    const min = Math.min(...array, ...array2);
    expect(min).to.equal(2);
  });
});
